// DBUNIT!
buildscript {
	dependencies {
		classpath group: 'org.dbunit', name: 'dbunit', version: '2.7.3'
		classpath 'org.postgresql:postgresql:42.2.5'
	}
}

plugins {
	id 'groovy'
	id 'org.springframework.boot' version '2.7.8'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	// JACACO!
	id 'jacoco'
	// CODENARC!
	id 'codenarc'
}

group = 'com.github.jvalentino'
version = '0.0.1'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {

	// Groovy
	implementation 'org.codehaus.groovy:groovy'

	// Spring Boot Magic
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// To be able to upload files
	implementation 'commons-fileupload:commons-fileupload:1.3.1'

	// Security (Login)
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// Spring Session via JDBC
	implementation 'org.springframework.session:spring-session-jdbc'

	// DB management
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.postgresql:postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.14.1'

	// MD5
	implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'

	// Testing Magic
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.spockframework:spock-core:2.2-groovy-3.0'
	testImplementation group: 'org.spockframework', name: 'spock-spring', version: '2.2-groovy-3.0'
	testImplementation 'junit:junit:4.13.2'
	testImplementation 'cglib:cglib-nodep:3.3.0'
	testImplementation 'org.objenesis:objenesis:3.3'
	testImplementation 'com.h2database:h2'
	testImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'

}

tasks.named('test') {
	useJUnitPlatform()
}

// JACACO!
test {
	finalizedBy jacocoTestReport // report is always generated after tests run
	jacoco.excludes = [
			'**/*$*_closure*',
			'**/*/MyServletInitializer*',
			'**/*/UploadConfig*'
	]
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report

}

// https://stackoverflow.com/questions/43192220/how-can-i-verify-the-minimum-coverage-with-some-excluded-classes-and-with-the-ja
jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: [
					'**/*$*_closure*',
					'**/*/MyServletInitializer*',
					'**/*/UploadConfig*'
			])
		}))
	}
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				minimum = 0.85
			}
		}
	}
}

check {
	dependsOn jacocoTestCoverageVerification
}

// CODENARC!
codenarcTest.enabled = false

task codenarcConsoleReport {
	doLast {
		println file("${codenarc.reportsDir}/main.txt").text
	}
}

codenarcMain {
	finalizedBy codenarcConsoleReport
	reports {
		text.enabled = true
		html.enabled = true
	}
}

// DBUNIT!
import java.sql.Connection
import java.sql.DriverManager
import org.dbunit.database.*
import org.dbunit.dataset.*
import org.dbunit.dataset.xml.*
import org.dbunit.util.fileloader.*
import org.dbunit.operation.*

// https://stackoverflow.com/questions/44740416/drivermanager-doesnt-see-dependency-in-gradle-custom-plugins-task
IDatabaseConnection getConnection(String jdbc, String username, String password) {
	// database connection
	Class.forName("org.postgresql.Driver")
	Connection jdbcConnection = DriverManager.getConnection(
			jdbc,
			[user: username, password: password] as Properties, getClass())

	IDatabaseConnection connection = new DatabaseConnection(jdbcConnection)
	connection
}

void exportDatabase(String jdbc, String username, String password, String fileName) {
	IDatabaseConnection connection = getConnection(jdbc, username, password)

	// full database export
	IDataSet fullDataSet = connection.createDataSet()
	FlatXmlDataSet.write(fullDataSet, new FileOutputStream(fileName))

	connection.close()
}

void loadDatabase(String jdbc, String username, String password, String fileName) {
	IDatabaseConnection connection = getConnection(jdbc, username, password)
	DataFileLoader loader = new FlatXmlDataFileLoader()

	File file = layout.projectDirectory.file(fileName).asFile

	IDataSet ds = loader.loadDataSet(file.toURL())
	try {
		DatabaseOperation.REFRESH.execute(connection, ds) // refresh of the DB.
	} catch (e) {
		e.printStackTrace()
	} finally {
		connection.close()
	}
}

void deleteDatabase(String jdbc, String username, String password, String fileName) {
	IDatabaseConnection connection = getConnection(jdbc, username, password)
	DataFileLoader loader = new FlatXmlDataFileLoader()

	File file = layout.projectDirectory.file(fileName).asFile

	IDataSet ds = loader.loadDataSet(file.toURL())
	try {
		DatabaseOperation.DELETE_ALL.execute(connection, ds) // refresh of the DB.
	} catch (e) {
		e.printStackTrace()
	} finally {
		connection.close()
	}
}

task exportMainDb() {
	doLast {
		exportDatabase(
				"jdbc:postgresql://localhost:5432/examplesys",
				"postgres",
				"postgres",
				"config/dbunit/db.xml"
		)
	}
}

task loadMainDb() {
	doLast {
		loadDatabase(
				"jdbc:postgresql://localhost:5432/examplesys",
				"postgres",
				"postgres",
				"config/dbunit/db.xml"
		)
	}
}

task exportWarehouseDb() {
	doLast {
		exportDatabase(
				"jdbc:postgresql://localhost:5433/dw",
				"postgres",
				"postgres",
				"config/dbunit/db-dw.xml"
		)
	}
}

task deleteWarehouseDb() {
	doLast {
		deleteDatabase(
				"jdbc:postgresql://localhost:5433/dw",
				"postgres",
				"postgres",
				"config/dbunit/db-dw.xml"
		)
	}
}

